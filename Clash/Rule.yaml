rule-providers:
  SRC-IP-CIDR:
    type: http
    behavior: classical
    url: 'https://raw.githubusercontent.com/RayHoWo/Profiles/master/Clash/Provider/SRC-IP-CIDR.yaml'
    path: ./Rules/SRC-IP-CIDR
    interval: 86400
  Special:
    type: http
    behavior: classical
    url: 'https://raw.githubusercontent.com/RayHoWo/Profiles/master/Clash/Provider/Special.yaml'
    path: ./Rules/Special
    interval: 86400
  Apple:
    type: http
    behavior: classical
    url: 'https://raw.githubusercontent.com/RayHoWo/Profiles/master/Clash/Provider/Apple.yaml'
    path: ./Rules/Apple
    interval: 86400
  PayPal:
    type: http
    behavior: classical
    url: 'https://raw.githubusercontent.com/RayHoWo/Profiles/master/Clash/Provider/PayPal.yaml'
    path: ./Rules/PayPal
    interval: 86400
  Netflix:
    type: http
    behavior: classical
    url: 'https://raw.githubusercontent.com/RayHoWo/Profiles/master/Clash/Provider/Netflix.yaml'
    path: ./Rules/Netflix
    interval: 86400
  YouTube:
    type: http
    behavior: classical
    url: 'https://raw.githubusercontent.com/RayHoWo/Profiles/master/Clash/Provider/YouTube.yaml'
    path: ./Rules/YouTube
    interval: 86400
  TikTok:
    type: http
    behavior: classical
    url: 'https://raw.githubusercontent.com/RayHoWo/Profiles/master/Clash/Provider/TikTok.yaml'
    path: ./Rules/TikTok
    interval: 86400
  Spotify:
    type: http
    behavior: classical
    url: 'https://raw.githubusercontent.com/RayHoWo/Profiles/master/Clash/Provider/Spotify.yaml'
    path: ./Rules/Spotify
    interval: 86400
  WW Media:
    type: http
    behavior: classical
    url: 'https://raw.githubusercontent.com/RayHoWo/Profiles/master/Clash/Provider/WW Media.yaml'
    path: ./Rules/WW Media
    interval: 86400
  GCR Media:
    type: http
    behavior: classical
    url: 'https://raw.githubusercontent.com/RayHoWo/Profiles/master/Clash/Provider/Special.yaml'
    path: ./Rules/GCR Media
    interval: 86400
  US Media:
    type: http
    behavior: classical
    url: 'https://raw.githubusercontent.com/RayHoWo/Profiles/master/Clash/Provider/US%20Media.yaml'
    path: ./Rules/US Media
    interval: 86400
  UK Media:
    type: http
    behavior: classical
    url: 'https://raw.githubusercontent.com/RayHoWo/Profiles/master/Clash/Provider/UK%20Media.yaml'
    path: ./Rules/UK Media
    interval: 86400
  JP Media:
    type: http
    behavior: classical
    url: 'https://raw.githubusercontent.com/RayHoWo/Profiles/master/Clash/Provider/JP%20Media.yaml'
    path: ./Rules/JP Media
    interval: 86400
  KR Media:
    type: http
    behavior: classical
    url: 'https://raw.githubusercontent.com/RayHoWo/Profiles/master/Clash/Provider/KR%20Media.yaml'
    path: ./Rules/KR Media
    interval: 86400
  SG Media:
    type: http
    behavior: classical
    url: 'https://raw.githubusercontent.com/RayHoWo/Profiles/master/Clash/Provider/SG%20Media.yaml'
    path: ./Rules/SG Media
    interval: 86400
  HK Media:
    type: http
    behavior: classical
    url: 'https://raw.githubusercontent.com/RayHoWo/Profiles/master/Clash/Provider/HK%20Media.yaml'
    path: ./Rules/HK Media
    interval: 86400
  TW Media:
    type: http
    behavior: classical
    url: 'https://raw.githubusercontent.com/RayHoWo/Profiles/master/Clash/Provider/TW%20Media.yaml'
    path: ./Rules/TW Media
    interval: 86400
  Game:
    type: http
    behavior: classical
    url: 'https://raw.githubusercontent.com/RayHoWo/Profiles/master/Clash/Provider/Game.yaml'
    path: ./Rules/Game
    interval: 86400
  PROXY:
    type: http
    behavior: classical
    url: 'https://raw.githubusercontent.com/RayHoWo/Profiles/master/Clash/Provider/Proxy.yaml'
    path: ./Rules/Proxy
    interval: 86400
  China:
    type: http
    behavior: classical
    url: 'https://raw.githubusercontent.com/RayHoWo/Profiles/master/Clash/Provider/China.yaml'
    path: ./Rules/China
    interval: 86400
  ChinaIP:
    type: http
    behavior: ipcidr
    path: ./Rules/ChinaIP.yaml
    url: 'https://raw.githubusercontent.com/RayHoWo/Profiles/master/Clash/Provider/ChinaIP.yaml'
    interval: 86400
  LAN:
    type: http
    behavior: classical
    url: 'https://raw.githubusercontent.com/RayHoWo/Profiles/master/Clash/Provider/LAN.yaml'
    path: ./Rules/LAN
    interval: 86400
    
rules:
- RULE-SET,SRC-IP-CIDR,DIRECT
- RULE-SET,Special,DIRECT
- RULE-SET,Apple,Apple
- RULE-SET,PayPal,PayPal
- RULE-SET,Netflix,Netflix
- RULE-SET,YouTube,YouTube
- RULE-SET,TikTok,TikTok
- RULE-SET,Spotify,Spotify
- RULE-SET,WW Media,WW Media
- RULE-SET,GCR Media,GCR Media
- RULE-SET,US Media,United States
- RULE-SET,UK Media,United Kingdom
- RULE-SET,JP Media,Japan
- RULE-SET,KR Media,Korea
- RULE-SET,SG Media,Singapore
- RULE-SET,HK Media,Hong Kong
- RULE-SET,TW Media,Taiwan
- RULE-SET,Game,Game
- RULE-SET,PROXY,Proxy
- RULE-SET,China,DIRECT
- RULE-SET,ChinaIP,DIRECT
- RULE-SET,LAN,DIRECT

- GEOIP,US,United States
- GEOIP,GB,United Kingdom
- GEOIP,DE,Germany
- GEOIP,KR,Korea
- GEOIP,TW,Taiwan
- GEOIP,JP,Japan
- GEOIP,SG,Singapore
- GEOIP,HK,Hong Kong
- GEOIP,CN,DIRECT

- MATCH,Proxy

script:
  code: |
    def main(ctx, metadata):
        port_list = [21, 22, 23, 53, 80, 123, 143, 194, 443, 465, 587, 853, 993, 995, 998, 2052, 2053, 2082, 2083, 2086, 2095, 2096, 5222, 5228, 5229, 5230, 8080, 8443, 8880, 8888, 8889]
        ruleset_action = {"SRC-IP-CIDR": "DIRECT",
            "Special": "DIRECT",
            "Apple": "Apple",
            "PayPal": "PayPal",
            "Netflix": "Netflix",
            "YouTube": "YouTube",
            "TikTok": "TikTok",
            "Spotify": "Spotify",
            "WW Media": "WW Media",
            "GCR Media": "GCR Media",
            "US Media": "United States",
            "UK Media": "United Kingdom",
            "JP Media": "Japan",
            "KR Media": "Korea",
            "SG Media": "Singapore",
            "HK Media": "Hong Kong",
            "TW Media": "Taiwan",
            "Game": "Game",
            "PROXY": "Proxy",
            "China": "DIRECT",
            "ChinaIPs": "DIRECT",
            "LAN": "DIRECT"
            }
        port = int(metadata["dst_port"])

        if port not in port_list:
            return "DIRECT"

        for rule_name in ctx.rule_providers.keys():
            if ctx.rule_providers[rule_name].match(metadata):
                return ruleset_action[rule_name]

        ip = metadata["dst_ip"] or ctx.resolve_ip(metadata["host"])

        if ip == "":
          return "DIRECT"

        code = ctx.geoip(ip)

        if code == "CN":
          return "DIRECT"

        return "Proxy"