- RULE-SET,SRC_IP_CIDR,text

- RULE-SET,Special,DIRECT

- RULE-SET,Apple,Apple

- RULE-SET,PayPal,PayPal

- RULE-SET,Netflix,Netflix
- RULE-SET,YouTube,YouTube
- RULE-SET,TikTok,TikTok
- RULE-SET,Spotify,Spotify
- RULE-SET,WW_Media,WW_Media
- RULE-SET,GCR_Media,GCR_Media
- RULE-SET,US_Media,United States
- RULE-SET,UK_Media,United Kingdom
- RULE-SET,JP_Media,Japan
- RULE-SET,KR_Media,Korea
- RULE-SET,SG_Media,Singapore
- RULE-SET,HK_Media,Hong Kong
- RULE-SET,TW_Media,Taiwan

- RULE-SET,Game,Game

- RULE-SET,PROXY,Proxy

- RULE-SET,China,DIRECT
- RULE-SET,ChinaIPs,DIRECT

- RULE-SET,LAN,DIRECT

- RULE-SET,GEOIP,text

- MATCH,Proxy

script:
  code: |
    def main(ctx, metadata):
        port_list = [21, 22, 23, 53, 80, 123, 143, 194, 443, 465, 587, 853, 993, 995, 998, 2052, 2053, 2082, 2083, 2086, 2095, 2096, 5222, 5228, 5229, 5230, 8080, 8443, 8880, 8888, 8889]
        ruleset_action = {"SRC_IP_CIDR": "text",
            "Special": "DIRECT",
            "Apple": "Apple",
            "PayPal": "PayPal",
            "Netflix": "Netflix",
            "YouTube": "YouTube",
            "TikTok": "TikTok",
            "Spotify": "Spotify",
            "WW_Media": "WW_Media",
            "GCR_Media": "GCR_Media",
            "US_Media": "United States",
            "UK_Media": "United Kingdom",
            "JP_Media": "Japan",
            "KR_Media": "Korea",
            "SG_Media": "Singapore",
            "HK_Media": "Hong Kong",
            "TW_Media": "Taiwan",
            "Game": "Game",
            "PROXY": "Proxy",
            "China": "DIRECT",
            "ChinaIPs": "DIRECT",
            "LAN": "DIRECT",
            "GEOIP": "text"
            }
        port = int(metadata["dst_port"])

        if port not in port_list:
            return "DIRECT"

        for rule_name in ctx.rule_providers.keys():
            if ctx.rule_providers[rule_name].match(metadata):
                return ruleset_action[rule_name]

        ip = metadata["dst_ip"] or ctx.resolve_ip(metadata["host"])

        if ip == "":
          return "DIRECT"

        code = ctx.geoip(ip)

        if code == "CN":
          return "DIRECT"

        return "Others"

rule-providers:
  SRC-IP-CIDR:
    type: http
    behavior: classical
    url: 'https://raw.githubusercontent.com/RayHoWo/Profiles/master/Clash/Provider/SRC-IP-CIDR.yaml'
    path: ./Rules/SRC-IP-CIDR
    interval: 86400
  Special:
    type: http
    behavior: classical
    url: 'https://raw.githubusercontent.com/RayHoWo/Profiles/master/Clash/Provider/Special.yaml'
    path: ./Rules/Special
    interval: 86400
  Apple:
    type: http
    behavior: classical
    url: 'https://raw.githubusercontent.com/RayHoWo/Profiles/master/Clash/Provider/Apple.yaml'
    path: ./Rules/Apple
    interval: 86400
  PayPay:
    type: http
    behavior: classical
    url: 'https://raw.githubusercontent.com/RayHoWo/Profiles/master/Clash/Provider/PayPal.yaml'
    path: ./Rules/PayPal
    interval: 86400
  Netflix:
    type: http
    behavior: classical
    url: 'https://raw.githubusercontent.com/RayHoWo/Profiles/master/Clash/Provider/Netflix.yaml'
    path: ./Rules/Netflix
    interval: 86400
  YouTube:
    type: http
    behavior: classical
    url: 'https://raw.githubusercontent.com/RayHoWo/Profiles/master/Clash/Provider/YouTube.yaml'
    path: ./Rules/YouTube
    interval: 86400
  TikTok:
    type: http
    behavior: classical
    url: 'https://raw.githubusercontent.com/RayHoWo/Profiles/master/Clash/Provider/TikTok.yaml'
    path: ./Rules/TikTok
    interval: 86400
  Spotify:
    type: http
    behavior: classical
    url: 'https://raw.githubusercontent.com/RayHoWo/Profiles/master/Clash/Provider/Spotify.yaml'
    path: ./Rules/Spotify
    interval: 86400
  WW_Media:
    type: http
    behavior: classical
    url: 'https://raw.githubusercontent.com/RayHoWo/Profiles/master/Clash/Provider/WW_Media.yaml'
    path: ./Rules/WW_Media
    interval: 86400
  GCR_Media:
    type: http
    behavior: classical
    url: 'https://raw.githubusercontent.com/RayHoWo/Profiles/master/Clash/Provider/Special.yaml'
    path: ./Rules/GCR_Media
    interval: 86400
  US_Media:
    type: http
    behavior: classical
    url: 'https://raw.githubusercontent.com/RayHoWo/Profiles/master/Clash/Provider/US_Media.yaml'
    path: ./Rules/US_Media
    interval: 86400
  UK_Media:
    type: http
    behavior: classical
    url: 'https://raw.githubusercontent.com/RayHoWo/Profiles/master/Clash/Provider/UK_Media.yaml'
    path: ./Rules/UK_Media
    interval: 86400
  JP_Media:
    type: http
    behavior: classical
    url: 'https://raw.githubusercontent.com/RayHoWo/Profiles/master/Clash/Provider/JP_Media.yaml'
    path: ./Rules/JP_Media
    interval: 86400
  KR_Media:
    type: http
    behavior: classical
    url: 'https://raw.githubusercontent.com/RayHoWo/Profiles/master/Clash/Provider/KR_Media.yaml'
    path: ./Rules/KR_Media
    interval: 86400
  SG_Media:
    type: http
    behavior: classical
    url: 'https://raw.githubusercontent.com/RayHoWo/Profiles/master/Clash/Provider/SG_Media.yaml'
    path: ./Rules/SG_Media
    interval: 86400
  HK_Media:
    type: http
    behavior: classical
    url: 'https://raw.githubusercontent.com/RayHoWo/Profiles/master/Clash/Provider/HK_Media.yaml'
    path: ./Rules/HK_Media
    interval: 86400
  TW_Media:
    type: http
    behavior: classical
    url: 'https://raw.githubusercontent.com/RayHoWo/Profiles/master/Clash/Provider/TW_Media.yaml'
    path: ./Rules/TW_Media
    interval: 86400
  Gmae:
    type: http
    behavior: classical
    url: 'https://raw.githubusercontent.com/RayHoWo/Profiles/master/Clash/Provider/Game.yaml'
    path: ./Rules/Game
    interval: 86400
  PROXY:
    type: http
    behavior: classical
    url: 'https://raw.githubusercontent.com/RayHoWo/Profiles/master/Clash/Provider/Proxy.yaml'
    path: ./Rules/Proxy
    interval: 86400
  China:
    type: http
    behavior: classical
    url: 'https://raw.githubusercontent.com/RayHoWo/Profiles/master/Clash/Provider/China.yaml'
    path: ./Rules/China
    interval: 86400
  ChinaIPs:
    type: http
    behavior: classical
    url: 'https://raw.githubusercontent.com/RayHoWo/Profiles/master/Clash/Provider/ChinaIPs.yaml'
    path: ./Rules/ChinaIPs
    interval: 86400
  LAN:
    type: http
    behavior: classical
    url: 'https://raw.githubusercontent.com/RayHoWo/Profiles/master/Clash/Provider/LAN.yaml'
    path: ./Rules/LAN
    interval: 86400
  GEOIP:
    type: http
    behavior: classical
    url: 'https://raw.githubusercontent.com/RayHoWo/Profiles/master/Clash/Provider/GEOIP.yaml'
    path: ./Rules/GEOIP
    interval: 86400